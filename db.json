{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/rss.xml","path":"rss.xml","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/rss.xml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1479773002078},{"_id":"source/CNAME","hash":"7fa649f273071767e3aee375da8f1ec3316e9269","modified":1479642270830},{"_id":"source/favicon.ico","hash":"aae9c333249a02ae4148a924b44357bbb6213643","modified":1479390109200},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1479392773992},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1479392773992},{"_id":"themes/maupassant/README.md","hash":"75d8c42569809961953d1934de445418c00ab94c","modified":1479392773996},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1479392773996},{"_id":"source/_posts/different-between-URI-and-URL.md","hash":"c0b3bc5fae2dd5454a941457c494ff8874a44966","modified":1479641373844},{"_id":"source/_posts/first-blog.md","hash":"c63cff1cb46617bc6643d46b04cddf78193deb11","modified":1479684649067},{"_id":"source/_posts/swap-two-numbers-without-temp.md","hash":"afdc8beeeb30dca87598e925ec98ee4733d66043","modified":1480683405775},{"_id":"themes/maupassant/_config.yml","hash":"0057e808d93fd3535f1fbb3470cde883e9f2e97b","modified":1479773267122},{"_id":"source/about/.index.md.swp","hash":"1116ffc69c86299fd2974a36ad6c56fd0f07a91b","modified":1479429529650},{"_id":"source/comments/index.md","hash":"5832376436006676251da6ea9829984e289c8f91","modified":1479640723896},{"_id":"source/home/index.md","hash":"b10a00c5878b0c311fd8325e0d67af10900987c9","modified":1479429609166},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1479392773996},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1479392773996},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1479392773996},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1479392773996},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1479392773996},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1479392773996},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1479392773996},{"_id":"source/about/index.md","hash":"d9b51c1d4da57e2b9d006d1e86fc8d364f6228d8","modified":1479684746031},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1479392773996},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"1ad721de96784bf4253316b796db6200148d4152","modified":1479392773996},{"_id":"themes/maupassant/layout/base.jade","hash":"e648d878786ca17cd2d073ebd3db50f86d85d471","modified":1479392773996},{"_id":"themes/maupassant/layout/index.jade","hash":"f842164f6cba007c1dfcd7fe7bba24736bc886a9","modified":1479392773996},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1479392773996},{"_id":"themes/maupassant/layout/single-column.jade","hash":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1479392773996},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1479392773996},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1479392773996},{"_id":"source/archives/index.md","hash":"5ed34af37a151700fc7c44c32d3089d614b520b9","modified":1479685750377},{"_id":"source/timeline/index.md","hash":"ff09094ac3cafbe9f3b3fff92ca969ef2768930e","modified":1479685823073},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1479392773996},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1479392773996},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1479392773996},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1479392773996},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1479392773996},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1479392773996},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1479392773996},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1479392773996},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1479392773996},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1479392773996},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1479392773996},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1479392773996},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1479392773996},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1479392773996},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1479392773996},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1479392773996},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1479392773996},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1479392773996},{"_id":"themes/maupassant/source/css/style.scss","hash":"158f1ebecf7b994ffae5332a627465f6bf38113b","modified":1479392773996},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1479392773996},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1479392773996},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1479392773996},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1479392773996},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1479392773996},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1479392773996},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1479392773996},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1479392773996},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1479392773996},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1479392773996},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1479392773996}],"Category":[{"name":"technology","_id":"ciw7ssjy10004c5havg447lrg"},{"name":"essays","_id":"ciw7ssjy60008c5hadofpws1f"},{"name":"algorithms","_id":"ciw7ssjy8000cc5hamkgkea4s"}],"Data":[],"Page":[{"layout":"page","comments":1,"_content":"\n","source":"comments/index.md","raw":"---\nlayout: page\ncomments: true\n---\n\n","date":"2016-11-20T11:18:43.916Z","updated":"2016-11-20T11:18:43.896Z","path":"comments/index.html","title":"","_id":"ciw7ssjxx0001c5ha19j5twii","content":"","excerpt":"","more":""},{"layout":"page","_content":"","source":"home/index.md","raw":"---\nlayout: page\n---\n","date":"2016-11-20T05:04:03.957Z","updated":"2016-11-18T00:40:09.166Z","path":"home/index.html","title":"","comments":1,"_id":"ciw7ssjxz0003c5ha5xto2nwu","content":"","excerpt":"","more":""},{"layout":"page","comments":0,"_content":"\n### About\n\nName: [Ewrin Schrodinger](https://www.zero-th.com/)\n\nEmail: [futurelabs@outlook.com](mailto:futurelabs@outlook.com)\n\nGithub: [@cloudsling](https://github.com/cloudsling)\n\nWeibo: [@Future_labs](http://weibo.com/u/3209962131/)\n\nGoogle+: [@Schrodinger](https://plus.google.com/u/0/112921361590468634576)\n\nTwitter: [@Clouds](https://twitter.com/Clouds_Ling)\n","source":"about/index.md","raw":"---\nlayout: page\ncomments: false\n---\n\n### About\n\nName: [Ewrin Schrodinger](https://www.zero-th.com/)\n\nEmail: [futurelabs@outlook.com](mailto:futurelabs@outlook.com)\n\nGithub: [@cloudsling](https://github.com/cloudsling)\n\nWeibo: [@Future_labs](http://weibo.com/u/3209962131/)\n\nGoogle+: [@Schrodinger](https://plus.google.com/u/0/112921361590468634576)\n\nTwitter: [@Clouds](https://twitter.com/Clouds_Ling)\n","date":"2016-11-20T23:32:26.071Z","updated":"2016-11-20T23:32:26.031Z","path":"about/index.html","title":"","_id":"ciw7ssjy40006c5hate54b4y1","content":"<h3 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h3><p>Name: <a href=\"https://www.zero-th.com/\">Ewrin Schrodinger</a></p>\n<p>Email: <a href=\"mailto:futurelabs@outlook.com\" target=\"_blank\" rel=\"external\">futurelabs@outlook.com</a></p>\n<p>Github: <a href=\"https://github.com/cloudsling\" target=\"_blank\" rel=\"external\">@cloudsling</a></p>\n<p>Weibo: <a href=\"http://weibo.com/u/3209962131/\" target=\"_blank\" rel=\"external\">@Future_labs</a></p>\n<p>Google+: <a href=\"https://plus.google.com/u/0/112921361590468634576\" target=\"_blank\" rel=\"external\">@Schrodinger</a></p>\n<p>Twitter: <a href=\"https://twitter.com/Clouds_Ling\" target=\"_blank\" rel=\"external\">@Clouds</a></p>\n","excerpt":"","more":"<h3 id=\"About\"><a href=\"#About\" class=\"headerlink\" title=\"About\"></a>About</h3><p>Name: <a href=\"https://www.zero-th.com/\">Ewrin Schrodinger</a></p>\n<p>Email: <a href=\"mailto:futurelabs@outlook.com\">futurelabs@outlook.com</a></p>\n<p>Github: <a href=\"https://github.com/cloudsling\">@cloudsling</a></p>\n<p>Weibo: <a href=\"http://weibo.com/u/3209962131/\">@Future_labs</a></p>\n<p>Google+: <a href=\"https://plus.google.com/u/0/112921361590468634576\">@Schrodinger</a></p>\n<p>Twitter: <a href=\"https://twitter.com/Clouds_Ling\">@Clouds</a></p>\n"},{"layout":"archive","_content":"","source":"archives/index.md","raw":"---\nlayout: archive\n---\n","date":"2016-11-20T23:49:10.409Z","updated":"2016-11-20T23:49:10.377Z","path":"archives/index.html","title":"","comments":1,"_id":"ciw7sskfz000gc5hais8zhtbq","content":"","excerpt":"","more":""},{"layout":"timeline","comments":0,"_content":"\n","source":"timeline/index.md","raw":"---\nlayout: timeline\ncomments: false\n---\n\n","date":"2016-11-20T23:50:23.157Z","updated":"2016-11-20T23:50:23.073Z","path":"timeline/index.html","title":"","_id":"ciw7sskg1000hc5haokqhh6u6","content":"","excerpt":"","more":""}],"Post":[{"title":"URI与URL的区别","layout":"page","toc":true,"comments":1,"description":"黑人问号:URL和URI到底有什么区别?","_content":"\n## Intro\n\n在很多书上都看过URL和URI这两个概念,也曾很多次网上查阅过相关的资料,但还是会经常弄混这两个词,因此写下这篇博客提醒自己不要再忘了...\n\n### URI: Uniform Resource Identifier\n\nURI,即统一资源标示符.正如字面上的意思,URI就是用来标志某种资源或事物的名称,例如一个人的姓名,一本书的名字,或者一栋大楼的地址,都可以称为URI.从技术的角度讲,一个文件的文件名(无论是否包含具体路径),或者一串网址,都可以被称为URI.\n\n但在之前的例子中,一个人的名字,一本书的名字可以被称为URI,但并不是一个URL.因为你无法只通过这个名字找到这个确定的人或这本书.\n\n### URL: Uniform(Universal) Resource Locator\n\nURL,统一资源定位符,就是定位一个资源确切地址的名称.它是URI的一个子集.例如天安门,中华人民共和国上海市xx路xx区xx单元xx号,都可以被称为URL,因为根据这个URL你可以确切的找到这个地方.从程序员的角度讲,C:/Windows/System32/Security/tokyo_cold.7z,/home/someone/Downloads/firefox.tar.bz2,https://www.zero-th.com/ 这些都可以被称为URL.而现在,URL更多的被用来表示一个网络上的资源或者说网址,格式如下:协议类型://服务器地址(:端口号)/路径/(文件名).\n\n### 总结\n\n\n所有的URL都是URI,但是URI不一定是URL.区别就是URI是一个对资源的标示,不一定能够根据这个标示找到这个资源的确切位置.但如果能找到某个资源的位置的话那这个URI也是一个URL.而现在,URL往往被用来描述一个网络上的资源,即网址.所以在讨论关于网址方面的时候使用URL更加确切.妈妈再也不用纠结是ServiceUri还是ServiceUrl了蛤哈哈.\n\n### 引用\n\n* [https://danielmiessler.com/study/url-uri/][1]\n* http://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn\n\n维基百科:\n* https://en.wikipedia.org/wiki/Uniform_Resource_Locator\n* https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\n\n[1]: (https://danielmiessler.com/study/url-uri/)\n","source":"_posts/different-between-URI-and-URL.md","raw":"---\ntitle: URI与URL的区别\nlayout: page\ntoc: true\ncomments: true\ncategories: technology\ndescription: 黑人问号:URL和URI到底有什么区别?\n---\n\n## Intro\n\n在很多书上都看过URL和URI这两个概念,也曾很多次网上查阅过相关的资料,但还是会经常弄混这两个词,因此写下这篇博客提醒自己不要再忘了...\n\n### URI: Uniform Resource Identifier\n\nURI,即统一资源标示符.正如字面上的意思,URI就是用来标志某种资源或事物的名称,例如一个人的姓名,一本书的名字,或者一栋大楼的地址,都可以称为URI.从技术的角度讲,一个文件的文件名(无论是否包含具体路径),或者一串网址,都可以被称为URI.\n\n但在之前的例子中,一个人的名字,一本书的名字可以被称为URI,但并不是一个URL.因为你无法只通过这个名字找到这个确定的人或这本书.\n\n### URL: Uniform(Universal) Resource Locator\n\nURL,统一资源定位符,就是定位一个资源确切地址的名称.它是URI的一个子集.例如天安门,中华人民共和国上海市xx路xx区xx单元xx号,都可以被称为URL,因为根据这个URL你可以确切的找到这个地方.从程序员的角度讲,C:/Windows/System32/Security/tokyo_cold.7z,/home/someone/Downloads/firefox.tar.bz2,https://www.zero-th.com/ 这些都可以被称为URL.而现在,URL更多的被用来表示一个网络上的资源或者说网址,格式如下:协议类型://服务器地址(:端口号)/路径/(文件名).\n\n### 总结\n\n\n所有的URL都是URI,但是URI不一定是URL.区别就是URI是一个对资源的标示,不一定能够根据这个标示找到这个资源的确切位置.但如果能找到某个资源的位置的话那这个URI也是一个URL.而现在,URL往往被用来描述一个网络上的资源,即网址.所以在讨论关于网址方面的时候使用URL更加确切.妈妈再也不用纠结是ServiceUri还是ServiceUrl了蛤哈哈.\n\n### 引用\n\n* [https://danielmiessler.com/study/url-uri/][1]\n* http://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn\n\n维基百科:\n* https://en.wikipedia.org/wiki/Uniform_Resource_Locator\n* https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\n\n[1]: (https://danielmiessler.com/study/url-uri/)\n","slug":"different-between-URI-and-URL","published":1,"date":"2016-11-20T11:29:33.868Z","updated":"2016-11-20T11:29:33.844Z","photos":[],"link":"","_id":"ciw7ssjxu0000c5ha6cwate7l","content":"<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>在很多书上都看过URL和URI这两个概念,也曾很多次网上查阅过相关的资料,但还是会经常弄混这两个词,因此写下这篇博客提醒自己不要再忘了…</p>\n<h3 id=\"URI-Uniform-Resource-Identifier\"><a href=\"#URI-Uniform-Resource-Identifier\" class=\"headerlink\" title=\"URI: Uniform Resource Identifier\"></a>URI: Uniform Resource Identifier</h3><p>URI,即统一资源标示符.正如字面上的意思,URI就是用来标志某种资源或事物的名称,例如一个人的姓名,一本书的名字,或者一栋大楼的地址,都可以称为URI.从技术的角度讲,一个文件的文件名(无论是否包含具体路径),或者一串网址,都可以被称为URI.</p>\n<p>但在之前的例子中,一个人的名字,一本书的名字可以被称为URI,但并不是一个URL.因为你无法只通过这个名字找到这个确定的人或这本书.</p>\n<h3 id=\"URL-Uniform-Universal-Resource-Locator\"><a href=\"#URL-Uniform-Universal-Resource-Locator\" class=\"headerlink\" title=\"URL: Uniform(Universal) Resource Locator\"></a>URL: Uniform(Universal) Resource Locator</h3><p>URL,统一资源定位符,就是定位一个资源确切地址的名称.它是URI的一个子集.例如天安门,中华人民共和国上海市xx路xx区xx单元xx号,都可以被称为URL,因为根据这个URL你可以确切的找到这个地方.从程序员的角度讲,C:/Windows/System32/Security/tokyo_cold.7z,/home/someone/Downloads/firefox.tar.bz2,<a href=\"https://www.zero-th.com/\">https://www.zero-th.com/</a> 这些都可以被称为URL.而现在,URL更多的被用来表示一个网络上的资源或者说网址,格式如下:协议类型://服务器地址(:端口号)/路径/(文件名).</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>所有的URL都是URI,但是URI不一定是URL.区别就是URI是一个对资源的标示,不一定能够根据这个标示找到这个资源的确切位置.但如果能找到某个资源的位置的话那这个URI也是一个URL.而现在,URL往往被用来描述一个网络上的资源,即网址.所以在讨论关于网址方面的时候使用URL更加确切.妈妈再也不用纠结是ServiceUri还是ServiceUrl了蛤哈哈.</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><ul>\n<li><a href=\"(https://danielmiessler.com/study/url-uri/)\">https://danielmiessler.com/study/url-uri/</a></li>\n<li><a href=\"http://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn\" target=\"_blank\" rel=\"external\">http://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn</a></li>\n</ul>\n<p>维基百科:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Locator\" target=\"_blank\" rel=\"external\">https://en.wikipedia.org/wiki/Uniform_Resource_Locator</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\" target=\"_blank\" rel=\"external\">https://en.wikipedia.org/wiki/Uniform_Resource_Identifier</a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>在很多书上都看过URL和URI这两个概念,也曾很多次网上查阅过相关的资料,但还是会经常弄混这两个词,因此写下这篇博客提醒自己不要再忘了…</p>\n<h3 id=\"URI-Uniform-Resource-Identifier\"><a href=\"#URI-Uniform-Resource-Identifier\" class=\"headerlink\" title=\"URI: Uniform Resource Identifier\"></a>URI: Uniform Resource Identifier</h3><p>URI,即统一资源标示符.正如字面上的意思,URI就是用来标志某种资源或事物的名称,例如一个人的姓名,一本书的名字,或者一栋大楼的地址,都可以称为URI.从技术的角度讲,一个文件的文件名(无论是否包含具体路径),或者一串网址,都可以被称为URI.</p>\n<p>但在之前的例子中,一个人的名字,一本书的名字可以被称为URI,但并不是一个URL.因为你无法只通过这个名字找到这个确定的人或这本书.</p>\n<h3 id=\"URL-Uniform-Universal-Resource-Locator\"><a href=\"#URL-Uniform-Universal-Resource-Locator\" class=\"headerlink\" title=\"URL: Uniform(Universal) Resource Locator\"></a>URL: Uniform(Universal) Resource Locator</h3><p>URL,统一资源定位符,就是定位一个资源确切地址的名称.它是URI的一个子集.例如天安门,中华人民共和国上海市xx路xx区xx单元xx号,都可以被称为URL,因为根据这个URL你可以确切的找到这个地方.从程序员的角度讲,C:/Windows/System32/Security/tokyo_cold.7z,/home/someone/Downloads/firefox.tar.bz2,<a href=\"https://www.zero-th.com/\">https://www.zero-th.com/</a> 这些都可以被称为URL.而现在,URL更多的被用来表示一个网络上的资源或者说网址,格式如下:协议类型://服务器地址(:端口号)/路径/(文件名).</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>所有的URL都是URI,但是URI不一定是URL.区别就是URI是一个对资源的标示,不一定能够根据这个标示找到这个资源的确切位置.但如果能找到某个资源的位置的话那这个URI也是一个URL.而现在,URL往往被用来描述一个网络上的资源,即网址.所以在讨论关于网址方面的时候使用URL更加确切.妈妈再也不用纠结是ServiceUri还是ServiceUrl了蛤哈哈.</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><ul>\n<li><a href=\"(https://danielmiessler.com/study/url-uri/)\">https://danielmiessler.com/study/url-uri/</a></li>\n<li><a href=\"http://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn\">http://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn</a></li>\n</ul>\n<p>维基百科:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Locator\">https://en.wikipedia.org/wiki/Uniform_Resource_Locator</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Identifier\">https://en.wikipedia.org/wiki/Uniform_Resource_Identifier</a></li>\n</ul>\n"},{"title":"Hello World!","layout":"page","toc":true,"comments":1,"description":null,"_content":"\n\n博客终于基本上搭建好了,使用的是hexo和来自[@tufu9441][1]的主题,托管于Github Pages,更新什么的都很方便.在搭建网站的过程中也遇到了不少坑,还有些疑问没有解决.不过总会解决的．\n\n在自学编程的这些年里，没有大牛带我飞，前期遇到问题只有在网上搜索解决方法，到处是坑．但就这么一路磕磕绊绊这么多个月过去了，我也顺利的从一个小菜鸟成为了一个中级菜鸟．\n\n这些个月有个较为深刻的印象，就是在网上搜索解决方法的时候，经常会在其他大牛的一些技术博客里找到答案，但也会或者有时候会找不到答案，或者是些不相关的信息，或者是2007,2008年之类的的中古的答案，其已经不再适用了...当然，这些当时遗留下来的一些问题现在基本上都已经解决了，但是我会经常思考，也许这个地球上另一个人也在为这个相同的问题所苦恼，同样在谷歌相同的问题却找不到解决办法，哪怕对这方面的大佬来说根本是小菜一碟．所以老夫打算记下这些曾经或者现在困扰过我的问题，如果地球上会有另一个人也为相同的问题所苦恼，但是搜索到了这里，而我的方法恰好有用，那就是我最大的荣幸了:)\n\n### Tips: ~~人生经验~~\n今天我是作为一个中级菜鸟，给刚刚打开编程新世界大门的新手们传授一些人生经验:如果在使用某种技术的时候遇到了问题，应该做的第一件事情不是打开[谷歌][2]或者[必应][3](什么，~~百度~~？没听说过...)，而是打开官方的帮助文档，官方的总~~(应该)~~是最权威的．其次是这方面的权威书籍，多翻翻，也是非常有用的．再次，就是用[谷歌][2]等搜索引擎咯．善用搜索引擎也能够找到相当多的有用的信息，甚至比翻书更快找到答案．最后，就是在像Stackoverflow,知乎这样的网站上提问了，但你无法在短时间内得到有用的答案．就酱．\n\n### 引用\n\n* Github Pages: https://pages.github.com/\n* hexo: https://hexo.io/\n* 主题: https://github.com/tufu9441/maupassant-hexo/\n* Google: https://www.google.com/ncr\n* Bing: https://www.bing.com/\n\n\n\n[1]: https://github.com/tufu9441/maupassant-hexo\n[2]: https://www.google.com/ncr\n[3]: https://global.bing.com/?FORM=HPCNEN&setmkt=en-us&setlang=en-us\n","source":"_posts/first-blog.md","raw":"---\ntitle: Hello World!\nlayout: page\ntoc: true\ntags: essays\ncomments: true\ncategories: essays\ndescription: \n---\n\n\n博客终于基本上搭建好了,使用的是hexo和来自[@tufu9441][1]的主题,托管于Github Pages,更新什么的都很方便.在搭建网站的过程中也遇到了不少坑,还有些疑问没有解决.不过总会解决的．\n\n在自学编程的这些年里，没有大牛带我飞，前期遇到问题只有在网上搜索解决方法，到处是坑．但就这么一路磕磕绊绊这么多个月过去了，我也顺利的从一个小菜鸟成为了一个中级菜鸟．\n\n这些个月有个较为深刻的印象，就是在网上搜索解决方法的时候，经常会在其他大牛的一些技术博客里找到答案，但也会或者有时候会找不到答案，或者是些不相关的信息，或者是2007,2008年之类的的中古的答案，其已经不再适用了...当然，这些当时遗留下来的一些问题现在基本上都已经解决了，但是我会经常思考，也许这个地球上另一个人也在为这个相同的问题所苦恼，同样在谷歌相同的问题却找不到解决办法，哪怕对这方面的大佬来说根本是小菜一碟．所以老夫打算记下这些曾经或者现在困扰过我的问题，如果地球上会有另一个人也为相同的问题所苦恼，但是搜索到了这里，而我的方法恰好有用，那就是我最大的荣幸了:)\n\n### Tips: ~~人生经验~~\n今天我是作为一个中级菜鸟，给刚刚打开编程新世界大门的新手们传授一些人生经验:如果在使用某种技术的时候遇到了问题，应该做的第一件事情不是打开[谷歌][2]或者[必应][3](什么，~~百度~~？没听说过...)，而是打开官方的帮助文档，官方的总~~(应该)~~是最权威的．其次是这方面的权威书籍，多翻翻，也是非常有用的．再次，就是用[谷歌][2]等搜索引擎咯．善用搜索引擎也能够找到相当多的有用的信息，甚至比翻书更快找到答案．最后，就是在像Stackoverflow,知乎这样的网站上提问了，但你无法在短时间内得到有用的答案．就酱．\n\n### 引用\n\n* Github Pages: https://pages.github.com/\n* hexo: https://hexo.io/\n* 主题: https://github.com/tufu9441/maupassant-hexo/\n* Google: https://www.google.com/ncr\n* Bing: https://www.bing.com/\n\n\n\n[1]: https://github.com/tufu9441/maupassant-hexo\n[2]: https://www.google.com/ncr\n[3]: https://global.bing.com/?FORM=HPCNEN&setmkt=en-us&setlang=en-us\n","slug":"first-blog","published":1,"date":"2016-11-20T23:30:49.099Z","updated":"2016-11-20T23:30:49.067Z","photos":[],"link":"","_id":"ciw7ssjxy0002c5har0gw1wsn","content":"<p>博客终于基本上搭建好了,使用的是hexo和来自<a href=\"https://github.com/tufu9441/maupassant-hexo\" target=\"_blank\" rel=\"external\">@tufu9441</a>的主题,托管于Github Pages,更新什么的都很方便.在搭建网站的过程中也遇到了不少坑,还有些疑问没有解决.不过总会解决的．</p>\n<p>在自学编程的这些年里，没有大牛带我飞，前期遇到问题只有在网上搜索解决方法，到处是坑．但就这么一路磕磕绊绊这么多个月过去了，我也顺利的从一个小菜鸟成为了一个中级菜鸟．</p>\n<p>这些个月有个较为深刻的印象，就是在网上搜索解决方法的时候，经常会在其他大牛的一些技术博客里找到答案，但也会或者有时候会找不到答案，或者是些不相关的信息，或者是2007,2008年之类的的中古的答案，其已经不再适用了…当然，这些当时遗留下来的一些问题现在基本上都已经解决了，但是我会经常思考，也许这个地球上另一个人也在为这个相同的问题所苦恼，同样在谷歌相同的问题却找不到解决办法，哪怕对这方面的大佬来说根本是小菜一碟．所以老夫打算记下这些曾经或者现在困扰过我的问题，如果地球上会有另一个人也为相同的问题所苦恼，但是搜索到了这里，而我的方法恰好有用，那就是我最大的荣幸了:)</p>\n<h3 id=\"Tips-人生经验\"><a href=\"#Tips-人生经验\" class=\"headerlink\" title=\"Tips: 人生经验\"></a>Tips: <del>人生经验</del></h3><p>今天我是作为一个中级菜鸟，给刚刚打开编程新世界大门的新手们传授一些人生经验:如果在使用某种技术的时候遇到了问题，应该做的第一件事情不是打开<a href=\"https://www.google.com/ncr\" target=\"_blank\" rel=\"external\">谷歌</a>或者<a href=\"https://global.bing.com/?FORM=HPCNEN&amp;setmkt=en-us&amp;setlang=en-us\" target=\"_blank\" rel=\"external\">必应</a>(什么，<del>百度</del>？没听说过…)，而是打开官方的帮助文档，官方的总<del>(应该)</del>是最权威的．其次是这方面的权威书籍，多翻翻，也是非常有用的．再次，就是用<a href=\"https://www.google.com/ncr\" target=\"_blank\" rel=\"external\">谷歌</a>等搜索引擎咯．善用搜索引擎也能够找到相当多的有用的信息，甚至比翻书更快找到答案．最后，就是在像Stackoverflow,知乎这样的网站上提问了，但你无法在短时间内得到有用的答案．就酱．</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><ul>\n<li>Github Pages: <a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">https://pages.github.com/</a></li>\n<li>hexo: <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">https://hexo.io/</a></li>\n<li>主题: <a href=\"https://github.com/tufu9441/maupassant-hexo/\" target=\"_blank\" rel=\"external\">https://github.com/tufu9441/maupassant-hexo/</a></li>\n<li>Google: <a href=\"https://www.google.com/ncr\" target=\"_blank\" rel=\"external\">https://www.google.com/ncr</a></li>\n<li>Bing: <a href=\"https://www.bing.com/\" target=\"_blank\" rel=\"external\">https://www.bing.com/</a></li>\n</ul>\n","excerpt":"","more":"<p>博客终于基本上搭建好了,使用的是hexo和来自<a href=\"https://github.com/tufu9441/maupassant-hexo\">@tufu9441</a>的主题,托管于Github Pages,更新什么的都很方便.在搭建网站的过程中也遇到了不少坑,还有些疑问没有解决.不过总会解决的．</p>\n<p>在自学编程的这些年里，没有大牛带我飞，前期遇到问题只有在网上搜索解决方法，到处是坑．但就这么一路磕磕绊绊这么多个月过去了，我也顺利的从一个小菜鸟成为了一个中级菜鸟．</p>\n<p>这些个月有个较为深刻的印象，就是在网上搜索解决方法的时候，经常会在其他大牛的一些技术博客里找到答案，但也会或者有时候会找不到答案，或者是些不相关的信息，或者是2007,2008年之类的的中古的答案，其已经不再适用了…当然，这些当时遗留下来的一些问题现在基本上都已经解决了，但是我会经常思考，也许这个地球上另一个人也在为这个相同的问题所苦恼，同样在谷歌相同的问题却找不到解决办法，哪怕对这方面的大佬来说根本是小菜一碟．所以老夫打算记下这些曾经或者现在困扰过我的问题，如果地球上会有另一个人也为相同的问题所苦恼，但是搜索到了这里，而我的方法恰好有用，那就是我最大的荣幸了:)</p>\n<h3 id=\"Tips-人生经验\"><a href=\"#Tips-人生经验\" class=\"headerlink\" title=\"Tips: 人生经验\"></a>Tips: <del>人生经验</del></h3><p>今天我是作为一个中级菜鸟，给刚刚打开编程新世界大门的新手们传授一些人生经验:如果在使用某种技术的时候遇到了问题，应该做的第一件事情不是打开<a href=\"https://www.google.com/ncr\">谷歌</a>或者<a href=\"https://global.bing.com/?FORM=HPCNEN&amp;setmkt=en-us&amp;setlang=en-us\">必应</a>(什么，<del>百度</del>？没听说过…)，而是打开官方的帮助文档，官方的总<del>(应该)</del>是最权威的．其次是这方面的权威书籍，多翻翻，也是非常有用的．再次，就是用<a href=\"https://www.google.com/ncr\">谷歌</a>等搜索引擎咯．善用搜索引擎也能够找到相当多的有用的信息，甚至比翻书更快找到答案．最后，就是在像Stackoverflow,知乎这样的网站上提问了，但你无法在短时间内得到有用的答案．就酱．</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><ul>\n<li>Github Pages: <a href=\"https://pages.github.com/\">https://pages.github.com/</a></li>\n<li>hexo: <a href=\"https://hexo.io/\">https://hexo.io/</a></li>\n<li>主题: <a href=\"https://github.com/tufu9441/maupassant-hexo/\">https://github.com/tufu9441/maupassant-hexo/</a></li>\n<li>Google: <a href=\"https://www.google.com/ncr\">https://www.google.com/ncr</a></li>\n<li>Bing: <a href=\"https://www.bing.com/\">https://www.bing.com/</a></li>\n</ul>\n"},{"title":"如何不使用临时变量交换两个整形的值","layout":"page","toc":true,"comments":1,"description":null,"_content":"\n## 如何交换两个数的值而不使用临时变量\n\n要交换两个整形的值,最容易想到的方法就是使用一个临时变量:\n```C\nvoid swap(int *a, int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n```\n\n如果不使用临时变量可以这样:\n```C\nvoid swap(int *a, int *b)\n{\n    *a = *a - *b;\n    *b = *a + *b;\n    *a = *b - *a;\n}\n```\n如果对位运算熟悉的话可以:\n```C\nvoid swap(int *a, int *b)\n{\n    *a ^= *b;\n    *b ^= *a;\n    *a ^= *b;\n}\n```\n那么还有别的方法吗?\n\n### 奇技淫巧\n\n还记得曾经学习c#的时候(一年前),知道了一种不使用临时变量交换两个数的方法:\n```csharp\npublic static void Swap(ref int a, ref int b)\n{\n    a = b + (b = a) * 0;\n}\n```\n\n我记得当时第一次看到这种解法感觉很奇妙(~~装逼~~),而且也测试了也的确可行.原理想想也很简单,就是利用了压栈的技巧.\n\n之前给电脑装了windows+ubuntu双系统,现在也一直在使用ubuntu这个linux发行版学习C/C++.某次突然想到了交换变量这个古老的问题,所以想试试c但是或者c++的编译器能不能这样写,(~~以后如果面试被问到也可以**用~~)于是很简单的写了这么一个函数:\n```C\nvoid swap(int *a, int *p)\n{\n    *a = *b + (*b = *a) * 0;\n}\n```\n我使用了gcc编译器,但是结果却是b没有被赋值为a.为什么呢?很明显出现这个结果表明＋后面的表达式乘以0被编译器直接优化掉了.．.之后我换回windows又使用visual studio 2015 + c#6.0测试了一下,发现也不行了,也就是说现在的C#编译器也进行了这个优化.\n\n那么如何做到不加编译器开关让这个方法行之有效呢?很简单:\n```C\nvoid swap(int *a, int *b)\n{\n    *a = *a + *b - (*b = *a);\n}\n```\n\n因为没有与0相乘,所以无论是gcc还是c#编译器编译器,都老老实实的编译了这一个表达式而没有优化掉后面的赋值表达式.所以这种写法可以得到理想的输出.\n\n### 总结\n~~虽然最后这种写法逼格很高,但是好像并没有什么卵用...我想现在的面试官都不会问交换两个变量这种简单的问题了吧...~~","source":"_posts/swap-two-numbers-without-temp.md","raw":"---\ntitle: 如何不使用临时变量交换两个整形的值\nlayout: page\ntoc: true\ntags: essays\ncomments: true\ncategories: algorithms\ndescription: \n---\n\n## 如何交换两个数的值而不使用临时变量\n\n要交换两个整形的值,最容易想到的方法就是使用一个临时变量:\n```C\nvoid swap(int *a, int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\n```\n\n如果不使用临时变量可以这样:\n```C\nvoid swap(int *a, int *b)\n{\n    *a = *a - *b;\n    *b = *a + *b;\n    *a = *b - *a;\n}\n```\n如果对位运算熟悉的话可以:\n```C\nvoid swap(int *a, int *b)\n{\n    *a ^= *b;\n    *b ^= *a;\n    *a ^= *b;\n}\n```\n那么还有别的方法吗?\n\n### 奇技淫巧\n\n还记得曾经学习c#的时候(一年前),知道了一种不使用临时变量交换两个数的方法:\n```csharp\npublic static void Swap(ref int a, ref int b)\n{\n    a = b + (b = a) * 0;\n}\n```\n\n我记得当时第一次看到这种解法感觉很奇妙(~~装逼~~),而且也测试了也的确可行.原理想想也很简单,就是利用了压栈的技巧.\n\n之前给电脑装了windows+ubuntu双系统,现在也一直在使用ubuntu这个linux发行版学习C/C++.某次突然想到了交换变量这个古老的问题,所以想试试c但是或者c++的编译器能不能这样写,(~~以后如果面试被问到也可以**用~~)于是很简单的写了这么一个函数:\n```C\nvoid swap(int *a, int *p)\n{\n    *a = *b + (*b = *a) * 0;\n}\n```\n我使用了gcc编译器,但是结果却是b没有被赋值为a.为什么呢?很明显出现这个结果表明＋后面的表达式乘以0被编译器直接优化掉了.．.之后我换回windows又使用visual studio 2015 + c#6.0测试了一下,发现也不行了,也就是说现在的C#编译器也进行了这个优化.\n\n那么如何做到不加编译器开关让这个方法行之有效呢?很简单:\n```C\nvoid swap(int *a, int *b)\n{\n    *a = *a + *b - (*b = *a);\n}\n```\n\n因为没有与0相乘,所以无论是gcc还是c#编译器编译器,都老老实实的编译了这一个表达式而没有优化掉后面的赋值表达式.所以这种写法可以得到理想的输出.\n\n### 总结\n~~虽然最后这种写法逼格很高,但是好像并没有什么卵用...我想现在的面试官都不会问交换两个变量这种简单的问题了吧...~~","slug":"swap-two-numbers-without-temp","published":1,"date":"2016-12-02T12:56:45.775Z","updated":"2016-12-02T12:56:45.775Z","photos":[],"link":"","_id":"ciw7ssjy30005c5ha9tsvi2ev","content":"<h2 id=\"如何交换两个数的值而不使用临时变量\"><a href=\"#如何交换两个数的值而不使用临时变量\" class=\"headerlink\" title=\"如何交换两个数的值而不使用临时变量\"></a>如何交换两个数的值而不使用临时变量</h2><p>要交换两个整形的值,最容易想到的方法就是使用一个临时变量:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = *a;</div><div class=\"line\">    *a = *b;</div><div class=\"line\">    *b = tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果不使用临时变量可以这样:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    *a = *a - *b;</div><div class=\"line\">    *b = *a + *b;</div><div class=\"line\">    *a = *b - *a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果对位运算熟悉的话可以:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    *a ^= *b;</div><div class=\"line\">    *b ^= *a;</div><div class=\"line\">    *a ^= *b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么还有别的方法吗?</p>\n<h3 id=\"奇技淫巧\"><a href=\"#奇技淫巧\" class=\"headerlink\" title=\"奇技淫巧\"></a>奇技淫巧</h3><p>还记得曾经学习c#的时候(一年前),知道了一种不使用临时变量交换两个数的方法:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Swap</span>(<span class=\"params\"><span class=\"keyword\">ref</span> <span class=\"keyword\">int</span> a, <span class=\"keyword\">ref</span> <span class=\"keyword\">int</span> b</span>)</span></div><div class=\"line\">&#123;</div><div class=\"line\">    a = b + (b = a) * <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我记得当时第一次看到这种解法感觉很奇妙(<del>装逼</del>),而且也测试了也的确可行.原理想想也很简单,就是利用了压栈的技巧.</p>\n<p>之前给电脑装了windows+ubuntu双系统,现在也一直在使用ubuntu这个linux发行版学习C/C++.某次突然想到了交换变量这个古老的问题,所以想试试c但是或者c++的编译器能不能这样写,(<del>以后如果面试被问到也可以**用</del>)于是很简单的写了这么一个函数:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *p)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    *a = *b + (*b = *a) * <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我使用了gcc编译器,但是结果却是b没有被赋值为a.为什么呢?很明显出现这个结果表明＋后面的表达式乘以0被编译器直接优化掉了.．.之后我换回windows又使用visual studio 2015 + c#6.0测试了一下,发现也不行了,也就是说现在的C#编译器也进行了这个优化.</p>\n<p>那么如何做到不加编译器开关让这个方法行之有效呢?很简单:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    *a = *a + *b - (*b = *a);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>因为没有与0相乘,所以无论是gcc还是c#编译器编译器,都老老实实的编译了这一个表达式而没有优化掉后面的赋值表达式.所以这种写法可以得到理想的输出.</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><del>虽然最后这种写法逼格很高,但是好像并没有什么卵用…我想现在的面试官都不会问交换两个变量这种简单的问题了吧…</del></p>\n","excerpt":"","more":"<h2 id=\"如何交换两个数的值而不使用临时变量\"><a href=\"#如何交换两个数的值而不使用临时变量\" class=\"headerlink\" title=\"如何交换两个数的值而不使用临时变量\"></a>如何交换两个数的值而不使用临时变量</h2><p>要交换两个整形的值,最容易想到的方法就是使用一个临时变量:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">int</span> tmp = *a;</div><div class=\"line\">    *a = *b;</div><div class=\"line\">    *b = tmp;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果不使用临时变量可以这样:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    *a = *a - *b;</div><div class=\"line\">    *b = *a + *b;</div><div class=\"line\">    *a = *b - *a;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果对位运算熟悉的话可以:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    *a ^= *b;</div><div class=\"line\">    *b ^= *a;</div><div class=\"line\">    *a ^= *b;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>那么还有别的方法吗?</p>\n<h3 id=\"奇技淫巧\"><a href=\"#奇技淫巧\" class=\"headerlink\" title=\"奇技淫巧\"></a>奇技淫巧</h3><p>还记得曾经学习c#的时候(一年前),知道了一种不使用临时变量交换两个数的方法:<br><figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Swap</span>(<span class=\"params\"><span class=\"keyword\">ref</span> <span class=\"keyword\">int</span> a, <span class=\"keyword\">ref</span> <span class=\"keyword\">int</span> b</span>)</div><div class=\"line\"></span>&#123;</div><div class=\"line\">    a = b + (b = a) * <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我记得当时第一次看到这种解法感觉很奇妙(<del>装逼</del>),而且也测试了也的确可行.原理想想也很简单,就是利用了压栈的技巧.</p>\n<p>之前给电脑装了windows+ubuntu双系统,现在也一直在使用ubuntu这个linux发行版学习C/C++.某次突然想到了交换变量这个古老的问题,所以想试试c但是或者c++的编译器能不能这样写,(<del>以后如果面试被问到也可以**用</del>)于是很简单的写了这么一个函数:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *p)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    *a = *b + (*b = *a) * <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我使用了gcc编译器,但是结果却是b没有被赋值为a.为什么呢?很明显出现这个结果表明＋后面的表达式乘以0被编译器直接优化掉了.．.之后我换回windows又使用visual studio 2015 + c#6.0测试了一下,发现也不行了,也就是说现在的C#编译器也进行了这个优化.</p>\n<p>那么如何做到不加编译器开关让这个方法行之有效呢?很简单:<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> *b)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    *a = *a + *b - (*b = *a);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>因为没有与0相乘,所以无论是gcc还是c#编译器编译器,都老老实实的编译了这一个表达式而没有优化掉后面的赋值表达式.所以这种写法可以得到理想的输出.</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><del>虽然最后这种写法逼格很高,但是好像并没有什么卵用…我想现在的面试官都不会问交换两个变量这种简单的问题了吧…</del></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciw7ssjxu0000c5ha6cwate7l","category_id":"ciw7ssjy10004c5havg447lrg","_id":"ciw7ssjy8000bc5hadk8b2vyf"},{"post_id":"ciw7ssjxy0002c5har0gw1wsn","category_id":"ciw7ssjy60008c5hadofpws1f","_id":"ciw7ssjy9000ec5ha76f4pcse"},{"post_id":"ciw7ssjy30005c5ha9tsvi2ev","category_id":"ciw7ssjy8000cc5hamkgkea4s","_id":"ciw7ssjy9000fc5hagonkas8c"}],"PostTag":[{"post_id":"ciw7ssjxy0002c5har0gw1wsn","tag_id":"ciw7ssjy50007c5haa2fn0een","_id":"ciw7ssjy8000ac5has09yv169"},{"post_id":"ciw7ssjy30005c5ha9tsvi2ev","tag_id":"ciw7ssjy50007c5haa2fn0een","_id":"ciw7ssjy9000dc5haeocqr0yi"}],"Tag":[{"name":"essays","_id":"ciw7ssjy50007c5haa2fn0een"}]}}